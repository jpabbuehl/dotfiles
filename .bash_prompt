#!/bin/bash

# Function to display Git repository status in prompt
prompt_git() {
  local s='';
  local branchName='';

# Check if the current directory is in a Git repository.
  if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

# check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
        git update-index --really-refresh -q &> /dev/null;
  fi;

# Check for uncommitted changes in the index.
  if ! git diff --quiet --ignore-submodules --cached; then
    s+='+';
  fi;

# Check for unstaged changes.
  if ! git diff-files --quiet --ignore-submodules --; then
    s+='!';
  fi;

# Check for untracked files.
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    s+='?';
  fi;

# Check for stashed files.
  if git rev-parse --verify refs/stash &>/dev/null; then
    s+='$';
  fi;

  fi;

# Get the short symbolic ref.
# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
# Otherwise, just give up.
  branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
              git rev-parse --short HEAD 2> /dev/null || \
              echo '(unknown)')";

  [ -n "${s}" ] && s=" [${s}]";

  echo -e "${1}${branchName}${blue}${s}";
  else
    return;
  fi;
}

# Detect if running in a cloud environment
cloud=""
if [[ -f /proc/cpuinfo ]] && grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
cloud="☁️ "
fi

# Terminal color setup
# Check if terminal supports colors, then set color variables
if tput setaf 1 &> /dev/null; then
tput sgr0; # reset colors
bold=$(tput bold);
reset=$(tput sgr0);
# Solarized colors, taken from http://git.io/solarized-colors.
black=$(tput setaf 0);
blue=$(tput setaf 33);
cyan=$(tput setaf 37);
green=$(tput setaf 64);
orange=$(tput setaf 166);
purple=$(tput setaf 125);
red=$(tput setaf 124);
violet=$(tput setaf 61);
white=$(tput setaf 15);
yellow=$(tput setaf 136);
else
bold='';
reset="\\e[0m";
# shellcheck disable=SC2034
black="\\e[1;30m";
blue="\\e[1;34m";
cyan="\\e[1;36m";
green="\\e[1;32m";
# shellcheck disable=SC2034
orange="\\e[1;33m";
# shellcheck disable=SC2034
purple="\\e[1;35m";
red="\\e[1;31m";
violet="\\e[1;35m";
white="\\e[1;37m";
yellow="\\e[1;33m";
fi;

# User and Host styling for prompt
# Red for root user, blue for others
[[ "${USER}" == "root" ]] && userStyle="${red}" || userStyle="${blue}"

# Cyan for SSH sessions, regular otherwise
[[ "${SSH_TTY}" ]] && hostStyle="${bold}${cyan}" || hostStyle="${cyan}"

# PS1: Main prompt string setup
PS1="\\[\\033]0;\\w\\007\\]"  # Set terminal title to current directory
PS1+="\\[${bold}\\]\\n"       # Newline
PS1+="\\[${userStyle}\\]\\u"  # Username
PS1+="\\[${white}\\] at "
PS1+="\\[${hostStyle}\\]${cloud}\\h"  # Hostname
PS1+="\\[${white}\\] in "
PS1+="\\[${green}\\]\\w"              # Working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")"  # Git details
PS1+="\\n"
PS1+="\\[${white}\\]\$ \\[${reset}\\]"  # `$` prompt and reset color
export PS1

# PS2: Secondary prompt string setup
PS2="\\[${yellow}\\]→ \\[${reset}\\]"
export PS2


# Terminal color support check for xterm
case "$TERM" in
  xterm-color|*-256color) 
    color_prompt=yes
    ;;
  *)
    ;;
esac

# Terminal title configuration for xterm and rxvt
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *)
    ;;
esac